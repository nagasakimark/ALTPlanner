{"version":3,"file":"static/js/772.acc888a4.chunk.js","mappings":"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","sources":["../node_modules/@tauri-apps/api/shell.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the system shell.\n * Allows you to spawn child processes and manage files and URLs using their default application.\n *\n * This package is also accessible with `window.__TAURI__.shell` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.shell`](https://tauri.app/v1/api/config/#allowlistconfig.shell) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"shell\": {\n *         \"all\": true, // enable all shell APIs\n *         \"execute\": true, // enable process spawn APIs\n *         \"sidecar\": true, // enable spawning sidecars\n *         \"open\": true // enable opening files/URLs using the default program\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the allowlist, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * ### Restricting access to the {@link Command | `Command`} APIs\n *\n * The `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\n * Each CLI is a configuration object `{ name: string, cmd: string, sidecar?: bool, args?: boolean | Arg[] }`.\n *\n * - `name`: the unique identifier of the command, passed to the {@link Command.constructor | Command constructor}.\n * If it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\n * - `cmd`: the program that is executed on this configuration. If it's a sidecar, this value is ignored.\n * - `sidecar`: whether the object configures a sidecar or a system program.\n * - `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n *   - `true` means that any argument list is allowed.\n *   - `false` means that no arguments are allowed.\n *   - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n *     or a `{ validator: string }` that defines a regex validating the argument value.\n *\n * #### Example scope configuration\n *\n * CLI: `git commit -m \"the commit message\"`\n *\n * Configuration:\n * ```json\n * {\n *   \"scope\": [\n *     {\n *       \"name\": \"run-git-commit\",\n *       \"cmd\": \"git\",\n *       \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n *     }\n *   ]\n * }\n * ```\n * Usage:\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell'\n * new Command('run-git-commit', ['commit', '-m', 'the commit message'])\n * ```\n *\n * Trying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nclass EventEmitter {\n    constructor() {\n        /** @ignore */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.eventListeners = Object.create(null);\n    }\n    /**\n     * Alias for `emitter.on(eventName, listener)`.\n     *\n     * @since 1.1.0\n     */\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    /**\n     * Alias for `emitter.off(eventName, listener)`.\n     *\n     * @since 1.1.0\n     */\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    /**\n     * Adds the `listener` function to the end of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.0.0\n     */\n    on(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].push(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName`. The\n     * next time `eventName` is triggered, this listener is removed and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    once(eventName, listener) {\n        const wrapper = (...args) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(...args);\n        };\n        return this.addListener(eventName, wrapper);\n    }\n    /**\n     * Removes the all specified listener from the listener array for the event eventName\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    off(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = this.eventListeners[eventName].filter((l) => l !== listener);\n        }\n        return this;\n    }\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    removeAllListeners(event) {\n        if (event) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete,security/detect-object-injection\n            delete this.eventListeners[event];\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.eventListeners = Object.create(null);\n        }\n        return this;\n    }\n    /**\n     * @ignore\n     * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\n     * to each.\n     *\n     * @returns `true` if the event had listeners, `false` otherwise.\n     */\n    emit(eventName, ...args) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,security/detect-object-injection\n            const listeners = this.eventListeners[eventName];\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            for (const listener of listeners)\n                listener(...args);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of listeners listening to the event named `eventName`.\n     *\n     * @since 1.1.0\n     */\n    listenerCount(eventName) {\n        if (eventName in this.eventListeners)\n            // eslint-disable-next-line security/detect-object-injection\n            return this.eventListeners[eventName].length;\n        return 0;\n    }\n    /**\n     * Adds the `listener` function to the _beginning_ of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    prependListener(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].unshift(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\n     * listener is removed, and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    prependOnceListener(eventName, listener) {\n        const wrapper = (...args) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(...args);\n        };\n        return this.prependListener(eventName, wrapper);\n    }\n}\n/**\n * @since 1.1.0\n */\nclass Child {\n    constructor(pid) {\n        this.pid = pid;\n    }\n    /**\n     * Writes `data` to the `stdin`.\n     *\n     * @param data The message to write, either a string or a byte array.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const command = new Command('node');\n     * const child = await command.spawn();\n     * await child.write('message');\n     * await child.write([0, 1, 2, 3, 4, 5]);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async write(data) {\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'stdinWrite',\n                pid: this.pid,\n                // correctly serialize Uint8Arrays\n                buffer: typeof data === 'string' ? data : Array.from(data)\n            }\n        });\n    }\n    /**\n     * Kills the child process.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async kill() {\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'killChild',\n                pid: this.pid\n            }\n        });\n    }\n}\n/**\n * The entry point for spawning child processes.\n * It emits the `close` and `error` events.\n * @example\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell';\n * const command = new Command('node');\n * command.on('close', data => {\n *   console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n * });\n * command.on('error', error => console.error(`command error: \"${error}\"`));\n * command.stdout.on('data', line => console.log(`command stdout: \"${line}\"`));\n * command.stderr.on('data', line => console.log(`command stderr: \"${line}\"`));\n *\n * const child = await command.spawn();\n * console.log('pid:', child.pid);\n * ```\n *\n * @since 1.1.0\n *\n */\nclass Command extends EventEmitter {\n    /**\n     * Creates a new `Command` instance.\n     *\n     * @param program The program name to execute.\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n     * @param args Program arguments.\n     * @param options Spawn options.\n     */\n    constructor(program, args = [], options) {\n        super();\n        /** Event emitter for the `stdout`. Emits the `data` event. */\n        this.stdout = new EventEmitter();\n        /** Event emitter for the `stderr`. Emits the `data` event. */\n        this.stderr = new EventEmitter();\n        this.program = program;\n        this.args = typeof args === 'string' ? [args] : args;\n        this.options = options !== null && options !== void 0 ? options : {};\n    }\n    /**\n     * Creates a command to execute the given sidecar program.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const command = Command.sidecar('my-sidecar');\n     * const output = await command.execute();\n     * ```\n     *\n     * @param program The program to execute.\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n     */\n    static sidecar(program, args = [], options) {\n        const instance = new Command(program, args, options);\n        instance.options.sidecar = true;\n        return instance;\n    }\n    /**\n     * Executes the command as a child process, returning a handle to it.\n     *\n     * @returns A promise resolving to the child process handle.\n     */\n    async spawn() {\n        const program = this.program;\n        const args = this.args;\n        const options = this.options;\n        if (typeof args === 'object') {\n            Object.freeze(args);\n        }\n        const onEvent = (event) => {\n            switch (event.event) {\n                case 'Error':\n                    this.emit('error', event.payload);\n                    break;\n                case 'Terminated':\n                    this.emit('close', event.payload);\n                    break;\n                case 'Stdout':\n                    this.stdout.emit('data', event.payload);\n                    break;\n                case 'Stderr':\n                    this.stderr.emit('data', event.payload);\n                    break;\n            }\n        };\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'execute',\n                program,\n                args,\n                options,\n                onEventFn: transformCallback(onEvent)\n            }\n        }).then((pid) => new Child(pid));\n    }\n    /**\n     * Executes the command as a child process, waiting for it to finish and collecting all of its output.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const output = await new Command('echo', 'message').execute();\n     * assert(output.code === 0);\n     * assert(output.signal === null);\n     * assert(output.stdout === 'message');\n     * assert(output.stderr === '');\n     * ```\n     *\n     * @returns A promise resolving to the child process output.\n     */\n    async execute() {\n        const program = this.program;\n        const args = this.args;\n        const options = this.options;\n        if (typeof args === 'object') {\n            Object.freeze(args);\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'executeAndReturn',\n                program,\n                args,\n                options\n            }\n        });\n    }\n}\n/**\n * Opens a path or URL with the system's default app,\n * or the one specified with `openWith`.\n *\n * The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\n * `open`, `start`, `xdg-open`, `gio`, `gnome-open`, `kde-open` or `wslview`.\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/shell';\n * // opens the given URL on the default browser:\n * await open('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await open('https://github.com/tauri-apps/tauri', 'firefox');\n * // opens a file using the default program:\n * await open('/path/to/file');\n * ```\n *\n * @param path The path or URL to open.\n * This value is matched against the string regex defined on `tauri.conf.json > tauri > allowlist > shell > open`,\n * which defaults to `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+`.\n * @param openWith The app to open the file or URL with.\n * Defaults to the system default application for the specified path type.\n *\n * @since 1.0.0\n */\nasync function open(path, openWith) {\n    return invokeTauriCommand({\n        __tauriModule: 'Shell',\n        message: {\n            cmd: 'open',\n            path,\n            with: openWith\n        }\n    });\n}\n\nexport { Child, Command, EventEmitter, open };\n"],"names":["EventEmitter","constructor","this","eventListeners","Object","create","addListener","eventName","listener","on","removeListener","off","push","once","_this","wrapper","arguments","filter","l","removeAllListeners","event","emit","listeners","_len","length","args","Array","_key","listenerCount","prependListener","unshift","prependOnceListener","_this2","Child","pid","write","data","invokeTauriCommand","__tauriModule","message","cmd","buffer","from","kill","Command","program","undefined","options","super","stdout","stderr","sidecar","instance","spawn","freeze","onEventFn","transformCallback","payload","then","execute","async","open","path","openWith","with"],"sourceRoot":""}